---
title: Configuring PKS API Access
owner: PKS
---

<strong><%= modified_date %></strong>

This topic describes how to configure access to the <%= vars.product_full %> API.
See [PKS API Authentication](pks-api-auth.html) for more information about how the PKS API and UAA interact with your <%= vars.product_short %> deployment.

##<a id='access'></a> Configure Access to the PKS API

1. Locate your Ops Manager root CA certificate.
 * If Ops Manager generated your certificate, refer to the [Retrieve the Ops Manager Root CA](https://docs.pivotal.io/pivotalcf/security/pcf-infrastructure/managing-certificates.html#root-certs) section of _Managing Certificates with the Ops Manager API_.
 * If you provided your own certificate, copy and paste the certificate you entered in the **PKS API** pane into a file.

1. Target your UAA server by running the following command:

    ```
    uaac target https\://PKS-API:8443 --ca-cert ROOT-CA-FILENAME
    ```
    Where:
    * `PKS-API` is the fully qualified domain name (FQDN) you use to access the PKS API.
    You configured this URL in the PKS API section of _Installing <%= vars.product_short %>_ for your IaaS.
    For example, see [Installing <%= vars.product_short %> on vSphere](installing-pks-vsphere.html#pks-api).
    * `ROOT-CA-FILENAME` is the path for the certificate file you downloaded in a previous step.
    For example:
    <pre class="terminal">
    $ uaac target api.pks.example.com:8443 --ca-cert my-cert.cert
    </pre>
    Including `https://` in the PKS API URL is optional.

1. To request a token from the UAA server run the following command:

    ```
    uaac token client get admin -s UAA-ADMIN-SECRET
    ```
    Where `UAA-ADMIN-SECRET` is your UAA admin secret.
    Refer to **Ops Manager** > **<%= vars.product_tile %>** > **Credentials** > **Pks Uaa Management Admin Client** to retrieve your UAA admin secret.

1. Grant cluster access to new or existing users with UAA.
For more information on granting cluster access to users or creating users, see the [Grant <%= vars.product_short %> Access to a User](manage-users.html#uaa-user)
section of _Managing Users in <%= vars.product_short %> with UAA_.

##<a id='login'></a> Log in to the PKS CLI as a User

For information about logging in to the PKS CLI as a user, see [Logging in to <%= vars.product_short %>](login.html).

<p class="note"><strong>Note</strong>: If you are creating a test environment, you can log in to the PKS CLI without creating a PKS CLI-specific user account.
Instead, you can use the existing Admin account and its UAA password to log in to the PKS CLI.
Refer to <strong>Ops Manager</strong> > <strong><%= vars.product_tile %></strong> > <strong>Credentials</strong> > <strong>Uaa Admin Password</strong> to retrieve your UAA Admin password and
then follow the log in steps in <a href="login.html">Logging in to <%= vars.product_short %></a>.
</p>

##<a id='client'></a> Log in to the PKS CLI as an Automated Client

On the command line, run the following command to log in to the PKS CLI as an automated client for
a script or service:

```
pks login -a PKS-API --client-name CLIENT-NAME --client-secret CLIENT-SECRET --ca-cert CERTIFICATE-PATH
```
Where:

* `PKS-API` is the domain name for the PKS API that you entered in **Ops Manager** > **<%= vars.product_tile %>** > **PKS API** > **API Hostname (FQDN)**. For example, `api.pks.example.com`.
* `CLIENT-NAME` is your OAuth client ID.
* `CLIENT-SECRET` is your OAuth client secret.
* `CERTIFICATE-PATH` is the path to your root CA certificate.
Provide the certificate to validate the PKS API certificate with SSL.

    For example:
    <pre class="terminal">
    $ pks login -a api.pks.example.com \
    --client-name automated-client \
    --client-secret randomly-generated-secret \
    --ca-cert /var/tempest/workspaces/default/root&#95;ca&#95;certificate
    </pre>

## <a id="pks-api-access"></a> Export PKS API Access Token

This procedure stores a PKS API access token as an environment variable that
you can use when executing PKS API calls on the command line.

<%= partial 'create-auth-token-var' %>
