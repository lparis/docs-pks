---
title: Upgrade Preparation Checklist for Enterprise PKS v1.4
owner: PKS
---

This topic serves as a checklist for preparing to upgrade Pivotal Container Service (PKS) v1.3 to
<%= vars.product_full %> v1.4.

This topic contains important preparation steps that you must follow before beginning your upgrade.
Failure to follow these instructions may jeopardize your existing deployment data and cause the
upgrade to fail.

After completing the steps in this topic, you can continue to [Upgrading Enterprise PKS](upgrade-pks.html).
If you are upgrading PKS for environments using vSphere with NSX-T, continue to
[Upgrading Enterprise PKS with NSX-T](upgrade-pks-nsxt.html).

##<a id='backup'></a>Back Up Your PKS Deployment

We recommend backing up your PKS deployment before upgrading, to restore in case of failure.

**If you are upgrading PKS for environments using vSphere with NSX-T**, back up your environment
using the procedures in the following topics:

- [Backup PKS](backup-and-restore.html)
- <a href="https://docs.vmware.com/en/VMware-NSX-T/2.1/com.vmware.nsxt.admin.doc/GUID-A0B3667C-FB7D-413F-816D-019BFAD81AC5.html">Backup NSX-T</a>
- <a href="https://kb.vmware.com/s/article/2149237">Backup vCenter</a>
<p class="note"><strong>Note</strong>: If you choose not to back up PKS, NSX-T, or vCenter, we recommend backing up the NSX-T and NSX-T Container Plugin (NCP) logs.</p>

**If you are upgrading PKS for any other IaaS**, back up the PKS v1.3 control plane. For more
information, see [Backing Up and Restoring PKS](https://docs.pivotal.io/runtimes/pks/1-3/backup-and-restore.html).

##<a id='review-changes'></a> Review Changes in <%= vars.product_short %> v1.4

Review the [Release Notes](release-notes.html) for <%= vars.product_short %> v1.4.

##<a id='configure-psp-bindings'></a> Configure RBAC for PSPs (if enabled)

Pod Security Policies (PSPs) are a Kubernetes security feature available in PKS starting with v1.4.0. For more information about PSPs in Enterprise PKS, see the [Pod Security Policy](./pod-security-policy.html) documentation.

When you install or upgrade to PKS 1.4.0, PSPs are not enabled by default. If you want to to enable PSPs for a new or existing cluster, you must define the necessary RBAC objects (role and binding) and PSP **BEFORE** you deploy the cluster, otherwise users will not be able to access the Kubernetes cluster after deployment. See [Enabling PSPs](./pod-security-policy.html#psp-enable) for more information

Enterprise PKS provides a PSP named `pks-restricted` that you can leverage, or you can define your own. You can also leverage one of the cluster roles already in the system. At a minium, you will need to define the proper cluster role binding so that users can access a cluster with PSPs enabled. See [Configuring PSP for Developers to Use](./pod-security-policy.html#psp-config) for more information.

##<a id='understand-upgrades'></a> Understand What Happens During PKS Upgrades

Review [What Happens During PKS Upgrades](understanding-upgrades.html), and evaluate your workload
capacity and uptime requirements.

##<a id='resource-usage'></a> View Workload Resource Usage

View your workload resource usage in Dashboard. For more information, see
[Accessing Dashboard](access-dashboard.html).

If workers are operating too close to their capacity, the upgrade can fail. To prevent workload
downtime during a cluster upgrade, we recommend running your workload on at least three
worker VMs, using multiple replicas of your workloads spread across those VMs. For more
information, see [Maintaining Workload Uptime](maintain-uptime.html).

If your clusters are near capacity for your existing infrastructure, we recommend scaling up your
clusters before you upgrade. Scale up your cluster by running `pks resize` or create a cluster
using a larger plan. For more information, see [Scaling Existing Clusters](scale-clusters.html).

##<a id='verify-k8s-health'></a> Verify Health of Kubernetes Environment

Verify that your Kubernetes environment is healthy. To verify the health of your Kubernetes
environment, see [Verifying Deployment Health](verify-health.html#k8s).

##<a id='review-vsphere-nsxt'></a> Verify NSX-T Configuration (vSphere with NSX-T Only)

If you are upgrading PKS for environments using vSphere with NSX-T, perform the following steps:

1. Verify that the vSphere datastores have enough space.
1. Verify that the vSphere hosts have enough memory.
1. Verify that there are no alarms in vSphere.
1. Verify that the vSphere hosts are in a good state.
1. Verify that NSX Edge is configured for high availability using Active/Standby mode.
  <p class="note"><strong>Note</strong>: Workloads in your Kubernetes cluster are unavailable while
  the NSX Edge nodes run the upgrade unless you configure NSX Edge for high availability. For more
  information, see the <a href="./nsxt-prepare-env.html#nsx-edge-ha">Configure NSX Edge for High Availability (HA)</a>
section of <em>Preparing NSX-T Before Deploying PKS</em>.</p>

##<a id='clean-up'></a>Clean Up Failed Kubernetes Clusters

Clean up previous failed attempts to delete PKS clusters with the PKS Command Line Interface
(PKS CLI) by performing the following steps:

1. View your deployed clusters by running the following command:

    ```
    pks clusters
    ```

    If the `Status` of any cluster displays as `FAILED`, continue to the next step. If no cluster
    displays as `FAILED`, no action is required. Continue to the next section.

1. Perform the procedures in
[Cannot Re-Create a Cluster that Failed to Deploy](troubleshoot-issues.html#cluster-recreate-fails)
to clean up the failed BOSH deployment.

1. View your deployed clusters again by running `pks clusters`. If any clusters remain in a `FAILED`
state, contact PKS Support.

##<a id='unique-hostname'></a> Verify Kubernetes Clusters Have Unique External Hostnames

Verify that existing Kubernetes clusters have unique external hostnames by checking for multiple
Kubernetes clusters with the same external hostname. Perform the following steps:

1. Log in to the PKS CLI. For more information, see
[Logging in to <%= vars.product_short %>](login.html). You must log in with an account that has the
UAA scope of `pks.clusters.admin`. For more information about UAA scopes, see
[Managing Users in Enterprise PKS with UAA](manage-users.html).

1. View your deployed PKS clusters by running the following command:

    ```
    pks clusters
    ```
1. For each deployed cluster, run `pks cluster CLUSTER-NAME` to view the details of the cluster.
For example:

    <pre class="terminal">
    $ pks cluster my-cluster
    </pre>
    Examine the output to verify that the `Kubernetes Master Host` is unique for each cluster.

##<a id='pks-proxy'></a> Verify PKS Proxy Configuration

Verify your current PKS proxy configuration by performing the following steps:

1. Check whether an existing proxy is enabled:
    1. Log in to Ops Manager.
    1. Click the **Pivotal Container Service** tile.
    1. Click **Networking**.
    1. If **HTTP/HTTPS Proxy** is **Disabled**, no action is required. Continue to the next section.
       If **HTTP/HTTPS Proxy** is **Enabled**, continue to the next step.

1. If the existing **No Proxy** field contains any of the following values, or you plan to add any
of the following values, contact PKS Support:
	* `localhost`
	* Hostnames containing dashes, such as `my-host.mydomain.com`

##<a id='check-poddisruptionbudget-value'></a> Check PodDisruptionBudget Value

A PKS upgrade will run without ever completing if any Kubernetes app has a `PodDisruptionBudget`
with `maxUnavailable` set to `0`. To ensure that no apps have a `PodDisruptionBudget` with
`maxUnavailable` set to `0`, perform the following steps:

1. Use the Kubernetes CLI, `kubectl`, to verify the `PodDisruptionBudget` as the cluster
administrator. Run the following command:

    ```
    kubectl get poddisruptionbudgets --all-namespaces
    ```

1. Examine the output. Verify that no app displays `0` in the `MAX UNAVAILABLE` column.
